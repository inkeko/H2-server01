package org.example.controller;

import org.example.dto.CityDTO;
import org.example.service.CityService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/cities")
public class CityController {

    private final CityService cityService;

    public CityController(CityService cityService) {
        this.cityService = cityService;
    }

    // √ñsszes v√°ros lek√©rdez√©se (opcion√°lis sz≈±r≈ëkkel)
    @GetMapping
    public List<CityDTO> getAllCities(
            @RequestParam(required = false, defaultValue = "false") boolean orderByPopulation,
            @RequestParam(required = false, defaultValue = "false") boolean onlyCapitals,
            @RequestParam(required = false) String country,
            @RequestParam(required = false) String continent) {

        // üîπ Ha van orsz√°g kiv√°lasztva, azt haszn√°ljuk!
        if (country != null && !country.isEmpty()) {
            return cityService.getCitiesByCountry(country, orderByPopulation);
        }
        // üîπ Ha nincs orsz√°g, de van kontinens, akkor kontinens alapj√°n sz≈±r√ºnk
        if (continent != null && !continent.equalsIgnoreCase("√ñsszes")) {
            return cityService.getCitiesByContinent(continent, orderByPopulation, onlyCapitals);
        }
        // üîπ Ha sem orsz√°g, sem kontinens nincs kiv√°lasztva, minden v√°rost lek√©rdez√ºnk
        return cityService.getAllCities(orderByPopulation, onlyCapitals);
    }


    // üîπ V√°rosok lek√©rdez√©se adott orsz√°g szerint (opcion√°lis rendez√©ssel)
    @GetMapping("/by-country")
    public List<CityDTO> getCitiesByCountry(
            @RequestParam String countryCode,
            @RequestParam(required = false, defaultValue = "false") boolean orderByPopulation) {
        return cityService.getCitiesByCountry(countryCode, orderByPopulation);
    }

    // üîπ V√°rosok lek√©rdez√©se adott kontinens szerint (opcion√°lis rendez√©ssel)
    // üîπ V√°rosok lek√©rdez√©se adott kontinens szerint (opcion√°lis rendez√©ssel √©s f≈ëv√°ros sz≈±r√©ssel)
    @GetMapping("/by-continent")
    public List<CityDTO> getCitiesByContinent(
            @RequestParam String continent,
            @RequestParam(required = false, defaultValue = "false") boolean orderByPopulation,
            @RequestParam(required = false, defaultValue = "false") boolean onlyCapitals) {  // ‚úÖ HOZZ√ÅADVA

        return cityService.getCitiesByContinent(continent, orderByPopulation, onlyCapitals); // ‚úÖ HI√ÅNYZ√ì PARAM√âTER
    }

    @GetMapping("/continents")
    public List<String> getContinents() {
        return cityService.getAllContinents();
    }


    @GetMapping("/countries/names")
    public List<String> getCountryNames() {
        return cityService.getAllCountryNames();
    }

    // üîπ Orsz√°gok lek√©rdez√©se adott kontinens szerint
    @GetMapping("/countries/by-continent")
    public List<String> getCountriesByContinent(@RequestParam String continent) {
        return cityService.getCountriesByContinent(continent);
    }


}
